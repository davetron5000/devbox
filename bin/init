#!/bin/sh

set -e

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. ${SCRIPT_DIR}/setupkit.sh.lib

usage_on_help "Initialize Dockbox for your app" "[path to app]" ${@}

if [ -z "$1" ]; then
  fatal "You must supply the path to your app's root"
fi

PROJECT_ROOT=$(realpath $1)

if [ ! -e "${PROJECT_ROOT}" ]; then
  fatal "${PROJECT_ROOT} does not exist. You must check out your app's project dir to run $0"
fi

DX_RELATIVE_DIR=dx
DX_DIR=${PROJECT_ROOT}/${DX_RELATIVE_DIR}

if [ -e ${DX_DIR} ]; then
  fatal "Dockbox is already installed in ${PROJECT_ROOT}, since it has a dx/ directory"
fi

DOCKERFILE=${PROJECT_ROOT}/Dockerfile.dx
if [ -e ${DOCKERFILE} ]; then
  fatal "${DOCKERFILE} already exists. Something may be wrong. Aborting"
fi

COMPOSE_FILE=${PROJECT_ROOT}/docker-compose.dx.yml
if [ -e ${COMPOSE_FILE} ]; then
  fatal "${COMPOSE_FILE} already exists. Something may be wrong. Aborting"
fi

main() {
  intro
  collect_info
  copy_files
  create_config
  create_dockerfile
  create_compose_file
}

intro() {
  log "📝" "Dockbox will collect some information from you, then copy its files to your app's source directory."
  log "📝" "It will also initialize a configuration file and, if you have a .gitignore, add a few lines to it"
  log "📝" "You can use your source code control system to inspect what it did before accepting the changes"
  log "📝" "Hit return to begin"
  read IGNORED
}
collect_info() {
  log
  log "1️⃣ " "Collecting Information"
  log

  PROJECT_NAME_GUESS=$(basename ${PROJECT_ROOT})
  user_input "📊" "What is your project's name, in letters and dashes only?" $PROJECT_NAME_GUESS
  PROJECT_NAME=$INPUT
  user_input "🏢" "What is your GitHub or DockerHub org name?"
  ORG_NAME=$INPUT
  user_input "🏷 " "What tag would you like to use? Dockbox recommends something meaningful for tool versions and not the version of your app"
  TAG=$INPUT
}

copy_files() {
  log
  log "2️⃣ " "Copying Files..."
  log

  log "📂" "Creating ${DX_DIR}"
  mkdir ${DX_DIR}

  for file in ${SCRIPT_DIR}/../dx-scripts/* ${SCRIPT_DIR}/setupkit.sh.lib ${SCRIPT_DIR}/../show-help-in-app-container-then-wait.sh; do
    log "🖨" "Copying ${file} to ${DX_DIR}"
    cp ${file} ${DX_DIR}
  done

  log "🖨" "Copying setupkit.sh.lib to ${DX_DIR}"
  cp ${SCRIPT_DIR}/setupkit.sh.lib ${DX_DIR}
}

create_config() {
  log
  log "3️⃣ " "Creating configuration files..."
  log

  log "⛺️" "Creating ${DX_DIR}/docker-compose.base.env"
  cat ${SCRIPT_DIR}/../templates/docker-compose.env | \
    sed "s/%PROJECT_NAME%/${PROJECT_NAME}/g" | \
    sed "s/%ORG_NAME%/${ORG_NAME}/g" | \
    sed "s/%TAG%/${TAG}/g" > ${DX_DIR}/docker-compose.base.env

  GITIGNORE=${PROJECT_ROOT}/.gitignore
  COMPOSE_ENV_LOCAL=${DX_RELATIVE_DIR}/docker-compose.local.env
  COMPOSE_ENV_DERIVED=${DX_RELATIVE_DIR}/docker-compose.env

  if [ -f ${GITIGNORE} ]; then

    if grep -q ${COMPOSE_ENV_LOCAL} ${GITIGNORE} ; then
      log "🧼" "Already ignoring ${COMPOSE_ENV_LOCAL}"
    else
      log "🧼" "Adding ${COMPOSE_ENV_LOCAL} to .gitignore"
      echo "# This is a per-developer configuration file for Dockbox and should not be committed" >> ${GITIGNORE}
      echo ${COMPOSE_ENV_LOCAL} >> ${GITIGNORE}
    fi

    if grep -q ${COMPOSE_ENV_DERIVED} ${GITIGNORE}; then
      log "🧼" "Already ignoring ${COMPOSE_ENV_DERIVED}"
    else
      log "🧼" "Adding ${COMPOSE_ENV_DERIVED} to .gitignore"
      echo "# This is a derived configuration file for Dockbox and should not be committed" >> ${GITIGNORE}
      echo "${COMPOSE_ENV_DERIVED}" >> ${GITIGNORE}
    fi

  else

    log "🧼" "No .gitignore found. You should configure your source control system to preven these files from being committed:"
    log
    log "🧼" "   ${COMPOSE_ENV_LOCAL}"
    log "🧼" "   ${COMPOSE_ENV_DERIVED}"
    log
    log "🧼" "They are derived files and could change per developer"
    log
    log "🧼" "Hit return to continue"

    read IGNORE

  fi
}

create_dockerfile() {
  log
  log "4️⃣ " "Creating a Dockerfile for development"
  log
  BASE_IMAGE=
  while [ -z "${BASE_IMAGE}" ]; do
    user_input "🎆 " "What base image do you want? If you aren't sure, enter 'help'"
    if [ "${INPUT}" = "help" ]; then
      log "💭" "For development, you probably want your programming language's official base image"
      log "💭" "Here are common ones DockBox knows about:"
      log
      log "💭" "golang        - https://hub.docker.com/_/golang"
      log "💭" "node          - https://hub.docker.com/_/node"
      log "💭" "python        - https://hub.docker.com/_/python"
      log "💭" "ruby or rails - https://hub.docker.com/_/ruby"
      log
      log "🚂" "If these aren't what you need, search DockerHub"
      log
      log "💭" "Given all that, your base image should be «lang»:«version»"
      log "💭" "(for example, ruby:3.2)"
    else
      BASE_IMAGE=${INPUT}
      case "${BASE_IMAGE}" in
        *:*)
          ;;
        *)
          user_confirm "🤔" "You didn't put a version in your base image. Are you sure?"
          if [ "${INPUT}" = "y" ]; then
            log "✅" "OK"
          else
            log "🔄" "Try again"
            BASE_IMAGE=
          fi
      esac
    fi
  done

  echo "FROM ${BASE_IMAGE}" > ${DOCKERFILE}
  echo >> ${DOCKERFILE}
  echo "ENV DEBIAN_FRONTEND noninteractive" >> ${DOCKERFILE}
  echo >> ${DOCKERFILE}

  log "🧩" "Dockbox can prime your Dockerfile with snippets relevant to your project"
  log
  log "🧩" "The order in which these are included somewhat matters, so you may want"
  log "🧩" "to review the generated Dockerfile when it's done"

  SNIPPETS=${SCRIPT_DIR}/../templates/Dockerfile.snippets

  while [ "$INPUT" != "done" ]; do
    user_input "🎛 " "Enter 'list' to list all known snippets, 'done' when done adding snippets"
    if [ "$INPUT" = "list" ]; then
      for snippet in `ls ${SNIPPETS}/*.snippet`; do 
        filename=$(basename -- ${snippet})
        snippet_name="${filename%.*}"
        log "📔" $snippet_name
      done
    else
      if [ "$INPUT" != "done" ]; then
        SNIPPET_FILE=${SNIPPETS}/${INPUT}.snippet
        if [ ! -e ${SNIPPET_FILE} ]; then
          log "🪹" "No snippet for ${INPUT}"
        else
          log "🧱" "Injecting ${INPUT} into ${DOCKERFILE}"
          echo >> ${DOCKERFILE}
          cat ${SNIPPET_FILE} | grep -v "# vim:" >> ${DOCKERFILE}
          echo >> ${DOCKERFILE}
        fi
      fi
    fi
  done

  echo "# This entrypoint produces a nice help message and waits around for you to do" >> ${DOCKERFILE}
  echo "# something with the container." >> ${DOCKERFILE}
  echo "COPY ${DX_RELATIVE_DIR}/show-help-in-app-container-then-wait.sh /root" >> ${DOCKERFILE}
  echo >> ${DOCKERFILE}
}

create_compose_file() {
  log
  log "5️⃣ " "Creating a docker-compose file for development"
  log

  cp ${SCRIPT_DIR}/../templates/docker-compose.yml ${COMPOSE_FILE}

  user_input "🪠" "What port does your app run on?"
  CONTAINER_PORT=${INPUT}
  user_input "🪠" "What port would you like that mapped to on your computer?" ${CONTAINER_PORT}
  HOST_PORT=${CONTAINER_PORT}

  echo "    ports:" >> ${COMPOSE_FILE}
  echo "      - \"${HOST_PORT}:${CONTAINER_PORT}\"" >> ${COMPOSE_FILE}

  log "🧩" "Dockbox can prime your compose file with services your project needs, like a database"

  services=()

  SERVICE_SNIPPETS=${SCRIPT_DIR}/../templates/docker-compose.snippets

  while [ "$INPUT" != "done" ]; do
    user_input "🎛 " "Enter 'list' to list all known services, 'done' when done adding snippets"
    if [ "$INPUT" = "list" ]; then
      for snippet in `ls ${SERVICE_SNIPPETS}/*.snippet`; do 
        filename=$(basename -- ${snippet})
        snippet_name="${filename%.*}"
        log "📔" $snippet_name
      done
    else
      if [ "$INPUT" != "done" ]; then
        SNIPPET_FILE=${SERVICE_SNIPPETS}/${INPUT}.snippet
        if [ ! -e ${SNIPPET_FILE} ]; then
          log "🪹" "No snippet for ${INPUT}"
        else
          log "🧱" "Injecting ${INPUT} into ${COMPOSE_FILE}"
          services+=(${INPUT})
        fi
      fi
    fi
  done
  echo "    depends_on:" >> ${COMPOSE_FILE}
  for service in ${services[@]}; do
    echo "      ${service}:" >> ${COMPOSE_FILE}
    echo "        condition: \"service_started\"" >> ${COMPOSE_FILE}
  done
  for service in ${services[@]}; do
    SNIPPET_FILE=${SERVICE_SNIPPETS}/${service}.snippet
    cat ${SNIPPET_FILE} | grep -v "# vim:" >> ${COMPOSE_FILE}
  done
}

main
# vim: ft=bash
