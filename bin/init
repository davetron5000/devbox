#!/bin/sh

set -e

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. ${SCRIPT_DIR}/setupkit.sh.lib

usage_on_help "Initialize Dockbox for your app" "[path to app]" ${@}

if [ -z "$1" ]; then
  fatal "You must supply the path to your app's root"
fi

DX_SCRIPTS_DIR=$(realpath ${SCRIPT_DIR}/../dx-scripts)
DX_TEMPLATES_DIR=$(realpath ${SCRIPT_DIR}/../templates)
DX_SNIPPETS_DIR=$(realpath ${DX_TEMPLATES_DIR}/snippets)
DX_SERVICES_DIR=$(realpath ${DX_TEMPLATES_DIR}/services)

PROJECT_ROOT=$(realpath $1)
DX_RELATIVE_DIR=dx
PROJECT_DX_DIR=${PROJECT_ROOT}/${DX_RELATIVE_DIR}
PROJECT_DOCKERFILE=${PROJECT_ROOT}/Dockerfile.dx
PROJECT_COMPOSE_FILE=${PROJECT_ROOT}/docker-compose.dx.yml


require_exist     ${PROJECT_ROOT}          "${PROJECT_ROOT} does not exist. You must check out your app's project dir to run $0"
require_not_exist ${PROJECT_DX_DIR}        "Dockbox is already installed in ${PROJECT_ROOT}, since it has a dx/ directory"
require_not_exist ${PROJECT_DOCKERFILE}    "${PROJECT_DOCKERFILE} already exists. Something may be wrong. Aborting"
require_not_exist ${PROJECT_COMPOSE_FILE}  "${PROJECT_COMPOSE_FILE} already exists. Something may be wrong. Aborting"

main() {
  intro
  collect_info
  copy_files
  create_config
  create_dockerfile
  create_compose_file
}

intro() {
  log "📝" "Dockbox will collect some information from you, then copy its files to your app's source directory."
  log "📝" "It will also initialize a configuration file and, if you have a .gitignore, add a few lines to it"
  log "📝" "You can use your source code control system to inspect what it did before accepting the changes"
  log "📝" "Hit return to begin"
  read IGNORED
}

collect_info() {
  log
  log "1️⃣ " "Collecting Information"
  log

  PROJECT_NAME_GUESS=$(basename ${PROJECT_ROOT})
  user_input "📊" "What is your project's name, in letters and dashes only?" ${PROJECT_NAME_GUESS}
  PROJECT_NAME=${INPUT}
  user_input "🏢" "What is your GitHub or DockerHub org name?"
  ORG_NAME=${INPUT}
  user_input "🏷 " "What tag would you like to use? Dockbox recommends something meaningful for tool versions and not the version of your app"
  TAG=${INPUT}
}

copy_files() {
  log
  log "2️⃣ " "Copying Files..."
  log

  log "📂" "Creating ${PROJECT_DX_DIR}"
  mkdir ${PROJECT_DX_DIR}

  for file in ${DX_SCRIPTS_DIR}/* ${SCRIPT_DIR}/setupkit.sh.lib; do
    log "🖨" "Copying ${file} to ${PROJECT_DX_DIR}"
    cp ${file} ${PROJECT_DX_DIR}
  done
}

create_config() {
  log
  log "3️⃣ " "Creating configuration files..."
  log

  project_compose_base_env=${PROJECT_DX_DIR}/docker-compose.base.env
  dx_compose_template_env=${DX_TEMPLATES_DIR}/docker-compose.template.env

  log "⛺️" "Creating ${project_compose_base_env}"

  export PROJECT_NAME
  export ORG_NAME
  export TAG
  cat ${dx_compose_template_env} | envsubst '$PROJECT_NAME,$ORG_NAME,$TAG' > ${project_compose_base_env}
  export -n PROJECT_NAME
  export -n ORG_NAME
  export -n TAG

  project_gitignore=${PROJECT_ROOT}/.gitignore
  project_compose_local_env=${DX_RELATIVE_DIR}/docker-compose.local.env
  project_compose_env=${DX_RELATIVE_DIR}/docker-compose.env

  if [ -f ${project_gitignore} ]; then

    if grep -q ${project_compose_local_env} ${project_gitignore} ; then
      log "🧼" "Already ignoring ${project_compose_local_env}"
    else
      log "🧼" "Adding ${project_compose_local_env} to .gitignore"
      echo "# This is a per-developer configuration file for Dockbox and should not be committed" >> ${project_gitignore}
      echo ${project_compose_local_env} >> ${project_gitignore}
    fi

    if grep -q ${project_compose_env} ${project_gitignore}; then
      log "🧼" "Already ignoring ${project_compose_env}"
    else
      log "🧼" "Adding ${project_compose_env} to .gitignore"
      echo "# This is a derived configuration file for Dockbox and should not be committed" >> ${project_gitignore}
      echo "${project_compose_env}" >> ${project_gitignore}
    fi

  else

    log "🧼" "No .gitignore found. You should configure your source control system to preven these files from being committed:"
    log
    log "🧼" "   ${project_compose_local_env}"
    log "🧼" "   ${project_compose_env}"
    log
    log "🧼" "They are derived files and could change per developer"
    log
    log "🧼" "Hit return to continue"

    read IGNORE

  fi
}

create_dockerfile() {
  log
  log "4️⃣ " "Creating a Dockerfile for development"
  log
  base_image_name=
  while [ -z "${base_image_name}" ]; do
    user_input "🎆 " "What base image do you want? If you aren't sure, enter 'help'"
    if [ "${INPUT}" = "help" ]; then
      log "💭" "For development, you probably want your programming language's official base image"
      log "💭" "Here are common ones DockBox knows about:"
      log
      log "💭" "golang        - https://hub.docker.com/_/golang"
      log "💭" "node          - https://hub.docker.com/_/node"
      log "💭" "python        - https://hub.docker.com/_/python"
      log "💭" "ruby or rails - https://hub.docker.com/_/ruby"
      log
      log "🚂" "If these aren't what you need, search DockerHub"
      log
      log "💭" "Given all that, your base image should be «lang»:«version»"
      log "💭" "(for example, ruby:3.2)"
    else
      base_image_name=${INPUT}
      case "${base_image_name}" in
        *:*)
          ;;
        *)
          user_confirm "🤔" "You didn't put a version in your base image. Are you sure?"
          if [ "${INPUT}" = "y" ]; then
            log "✅" "OK"
          else
            log "🔄" "Try again"
            base_image_name=
          fi
      esac
    fi
  done

  echo "FROM ${base_image_name}" > ${PROJECT_DOCKERFILE}
  echo >> ${PROJECT_DOCKERFILE}
  echo "ENV DEBIAN_FRONTEND noninteractive" >> ${PROJECT_DOCKERFILE}
  echo >> ${PROJECT_DOCKERFILE}

  log "🧩" "Dockbox can prime your Dockerfile with snippets relevant to your project"
  log
  log "🧩" "The order in which these are included somewhat matters, so you may want"
  log "🧩" "to review the generated Dockerfile when it's done"

  while [ "${INPUT}" != "done" ]; do
    user_input "🎛 " "Enter 'list' to list all known snippets, 'done' when done adding snippets"
    if [ "${INPUT}" = "list" ]; then
      for snippet in `ls ${DX_SNIPPETS_DIR}/*.snippet`; do 
        filename=$(basename -- ${snippet})
        snippet_name="${filename%.*}"
        log "📔" ${snippet_name}
      done
    else
      if [ "${INPUT}" != "done" ]; then
        snippet_file=${DX_SNIPPETS_DIR}/${INPUT}.snippet
        if [ ! -e ${snippet_file} ]; then
          log "🪹" "No snippet for ${INPUT}"
        else
          log "🧱" "Injecting ${INPUT} into ${PROJECT_DOCKERFILE}"
          echo >> ${PROJECT_DOCKERFILE}
          cat ${snippet_file} | grep -v "# vim:" >> ${PROJECT_DOCKERFILE}
          echo >> ${PROJECT_DOCKERFILE}
        fi
      fi
    fi
  done

  echo "# This entrypoint produces a nice help message and waits around for you to do" >> ${PROJECT_DOCKERFILE}
  echo "# something with the container." >> ${PROJECT_DOCKERFILE}
  echo "COPY ${DX_RELATIVE_DIR}/show-help-in-app-container-then-wait.sh /root" >> ${PROJECT_DOCKERFILE}
  echo >> ${PROJECT_DOCKERFILE}
}

create_compose_file() {
  log
  log "5️⃣ " "Creating a docker-compose file for development"
  log

  dx_docker_compose_template=${DX_TEMPLATES_DIR}/docker-compose.template.yml

  cp ${dx_docker_compose_template} ${PROJECT_COMPOSE_FILE}

  user_input "🪠" "What port does your app run on?"
  container_port=${INPUT}
  user_input "🪠" "What port would you like that mapped to on your computer?" ${container_port}
  host_port=${INPUT}

  echo "    ports:" >> ${PROJECT_COMPOSE_FILE}
  echo "      - \"${host_port}:${container_port}\"" >> ${PROJECT_COMPOSE_FILE}

  log "🧩" "Dockbox can prime your compose file with services your project needs, like a database"

  services=()

  while [ "${INPUT}" != "done" ]; do
    user_input "🎛 " "Enter 'list' to list all known services, 'done' when done adding snippets"
    if [ "${INPUT}" = "list" ]; then
      for snippet in `ls ${DX_SERVICES_DIR}/*.snippet`; do 
        filename=$(basename -- ${snippet})
        snippet_name="${filename%.*}"
        log "📔" ${snippet_name}
      done
    else
      if [ "${INPUT}" != "done" ]; then
        snippet_file=${DX_SERVICES_DIR}/${INPUT}.snippet
        if [ ! -e ${snippet_file} ]; then
          log "🪹" "No snippet for ${INPUT}"
        else
          log "🧱" "Injecting ${INPUT} into ${PROJECT_COMPOSE_FILE}"
          services+=(${INPUT})
        fi
      fi
    fi
  done
  echo "    depends_on:" >> ${PROJECT_COMPOSE_FILE}
  for service in ${services[@]}; do
    echo "      ${service}:" >> ${PROJECT_COMPOSE_FILE}
    echo "        condition: \"service_started\"" >> ${PROJECT_COMPOSE_FILE}
  done
  for service in ${services[@]}; do
    snippet_file=${DX_SERVICES_DIR}/${service}.snippet
    cat ${snippet_file} | grep -v "# vim:" >> ${PROJECT_COMPOSE_FILE}
  done
}

main
# vim: ft=bash
